<div class="text-center p-4">
  <img src="https://www.styled-components.com/atom.png" height="128">
</div>


<div class="text-center p-4">
  <h2>Styled-Components</h2>
  <p class="lead">Adding CSS to your Project</p>
</div>

@if (ViewBag.IsComplete == false)
{
  @using (Html.BeginForm())
  {
<div class="row justify-content-center">
  <div class="text-center container-sm col-8 col-sm-6 rounded">
    <div class="text center col-12">
    @using (Html.BeginForm())
    {
      <input type="submit" value= "Mark Complete" class = "bn632-hover bn20" />
    }
    </div>
  </div>
</div>
  }
} else if (ViewBag.IsComplete == true)
{
<div class="row justify-content-center">
  <div class="text-center container-sm col-8 col-sm-6 rounded">
    <div class="text center col-12">
    @using (Html.BeginForm())
    {
      <input type="submit" value= "Completed" class = "bn632-hover bn22" />
    }
    </div>
  </div>
</div>
}

<section class="text-content p-3 m-3">
  <div class="container-md p-3 m-3">    
    <p>From the Styled-Components documentation:</p>
    <blockquote cite="https://styled-components.com/docs">
      “Utilising tagged template literals (a recent addition to JavaScript) and the power of CSS, styled-components allows you to write actual CSS code to style your components. It also removes the mapping between components and styles – using components as a low-level styling construct could not be easier!”
    </blockquote>
    <blockquote cite="https://styled-components.com/docs/basics">
      "Apart from the improved experience for developers, styled-components provides:
      <ul>
        <li><strong>Automatic critical CSS:</strong> styled-components keeps track of which components are rendered on a page and injects their styles and nothing else, fully automatically. Combined with code splitting, this means your users load the least amount of code necessary.</li>
        <li><strong>No class name bugs:</strong> styled-components generates unique class names for your styles. You never have to worry about duplication, overlap or misspellings.</li>
        <li><strong>Easier deletion of CSS:</strong> it can be hard to know whether a class name is used somewhere in your codebase. styled-components makes it obvious, as every bit of styling is tied to a specific component. If the component is unused (which tooling can detect) and gets deleted, all its styles get deleted with it.</li>
        <li><strong>Simple dynamic styling:</strong> adapting the styling of a component based on its props or a global theme is simple and intuitive without having to manually manage dozens of classes.</li>
        <li><strong>Painless maintenance:</strong> you never have to hunt across different files to find the styling affecting your component, so maintenance is a piece of cake no matter how big your codebase is.</li>
        <li><strong>Automatic vendor prefixing:</strong> write your CSS to the current standard and let styled-components handle the rest."</li>        
      </ul>
    </blockquote>
  </div>
</section>

<section class="video-content bg-light shadow-lg p-3 mb-5 rounded">
  <div class="container-lg p-3 m-3">
    <div class="text-center">
      <h2>Styled Components Full Tutorial</h2>
    </div>
    <div class="row justify-content-center my-5">
        <iframe width="760" height="515" src="https://www.youtube.com/embed/-FZzPHSLauc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    </div>
  </div>
</section>

<section class="video-content bg-light shadow-lg p-3 mb-5 rounded">
  <div class="container-lg p-3 m-3">
    <div class="text-center">
      <h2>Using Styled Components to Build a Recipe App in React Native</h2>
    </div>
    <div class="row justify-content-center my-5">
        <iframe width="760" height="515" src="https://www.youtube.com/embed/eAXow8r3lYY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    </div>
  </div>
</section>

<section class="video-content bg-light shadow-lg p-3 mb-5 rounded">
  <div class="container-lg p-3 m-3">
    <div class="text-center">
      <h2>Learn Styled Components in 15 Minutes</h2>
    </div>
    <div class="row justify-content-center my-5">
        <iframe width="760" height="515" src="https://www.youtube.com/embed/17AwVXg5lHk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    </div>
  </div>
</section>

<div class="row justify-content-center my-5">
  <div class="text-center container-lg p-3 m-3 col-8 col-sm-6 rounded">
    <a href="/NoSQL/Lesson5"><button class="bn632-hover bn20">Previous Lesson</button></a>
    <a href="/NoSQL/Overview"><button class="bn632-hover bn20">Dashboard</button></a>
  </div>
</div>

<div class="card m-3 shadow-lg p-5 mb-5 rounded">
  <h3 class="text-center">Resources</h3>
  <a href="https://styled-components.com/docs">Official Styled-Components Documentation</a>
  <a href="https://www.joshwcomeau.com/css/styled-components/">The Styled-Components Happy Path</a>
  <a href="https://medium.com/swlh/styled-components-e29204a2fb1a">The Only Guide to Styled-Components You Will Need</a>
  <a href="https://www.robinwieruch.de/styled-components/">Styled Components Best Practices</a>
</div>